
module traces 

import mutable/map
import immutable/list

import tasks/all_tasks

import list_lib

type  VT = List[Trace[Hash[V]]] // Verifying Traces

effect VTState {
    def getVT(): VT
    def modify(key: K, valueHash: Hash[V], deps: List[(K,Hash[V])]): Unit
}

def recordVT(key: K, valueHash: Hash[V], deps: List[(K,Hash[V])], ts: VT[K,V,Hash[V]]): VT[K,V,Hash[V]] = {
	Cons(Trace(key, deps, valueHash), ts)
}


def verifyVT(key: K, valueHash: Hash[V], ts: VT[K,V,Hash[V]]){ fetchHash: K => Hash[V] / Fetch } : Boolean / Fetch = {
	ts.any{ trace => trace match {
		case Trace(k, deps, result) =>  
			if(k != key || result != valueHash) { false }
			else { deps.and{ keyHashPair => keyHashPair match {
						case (k, h) => h == fetchHash(k)
					}
				} 
			}
		}
	}
}