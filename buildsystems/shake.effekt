module buildsystems_shake

import mutable/map
import immutable/list
import immutable/option

import traces
import helpers
import tasks/all_tasks

import list_lib


def shake(target: K){ tasks: K => V / {Fetch, NeedInput} }: Unit / { Console, Store, VTState } = {
    println("shaking " ++ target);
    suspending(target){ (key, value) => 
        vtRebuilder(key, value){ () => tasks(key) } 
    }
}


def suspending(target: K){ rebuilder: (K,V) => V / { Fetch, NeedInput } }: Unit / { Store, Console } = { 
    val done: Map[K, Boolean] = emptyMap()
    
    def fetch(key: K): V = {
        (done.get(key)) match {
            case Some(_) => do getValue(key) // don't rebuild key, so just get the current value from store
            case None() => 
                val value = do getValue(key) // get previous build value
                val newValue = try { rebuilder(key,value) } // rebuild if outdated, else newValue = value 
                    with Fetch { key => resume(fetch(key)) } 
                    with NeedInput { key => resume(do getValue(key)) }
                putValue(key, newValue); done.update(key, true)
                
                newValue
        }
    }

    fetch(target);
    ()
}


def vtRebuilder(key: K, value: V){ task: () => V / {Fetch, NeedInput} }: V / { VTState, Fetch, NeedInput, Console } = {
	val upToDate = verifyVT(key, hash(value), do getVT()){ k => hash (do Fetch(k)) }
	if(upToDate) { println(key ++" -> " ++ show(value) ++ " is up to date") ; value }
	else { // rebuild value and add to VT
		println(key ++ " -> " ++ show(value) ++" is not up to date. rebuilding key")
		track(){ () => task() } match {
			case (newValue, deps) => 
				val hashedDeps = deps.map{ keyValPair => keyValPair match { 
						case (key, value) => (key, hash(value)) 
					}
				}
				do modifyVT(recordVT(key, hash(newValue), hashedDeps, do getVT())) 
				println(key ++ "'s new value: " ++ show(newValue) )
				newValue
		}
	}
} 


def main() = {
    val keys = ["A", "B", "C", "D","E","F"]
    val store: Map[K,V] = emptyMap()
    var vTraces: VT = []

    store.update("A",0)
    store.update("B",0)
    store.update("C",0)
    store.update("D",1)
    store.update("E",1)
	store.update("F",1)

    store.printStore(keys)

    try {
        
        shake("A"){ key => exampleTasks(key)}
        store.printStore(keys)
        
        println("")
        println(showTraces(vTraces))

        store.update("E", 2)
        shake("A"){ key => exampleTasks(key)}
        store.printStore(keys)
        println("")
        println(showTraces(vTraces))
        
        shake("A"){ key => exampleTasks(key)}
        store.printStore(keys)
        // shake("Z"){ key => onlyInput(key)}
        // store.printStore(["Z"])

        // shake("Z"){ key => onlyInput(key)}
        // store.printStore(["Z"])

        println("")
        println(showTraces(vTraces))
        
    } with Store {
        def putValue(key, value) = resume(store.update(key, value))
        def getValue(key) = resume(store.unsafeGet(key))
    } with VTState {
        def getVT() = resume(vTraces)
        def modifyVT(newTraces) = { vTraces = newTraces; resume(()) }
    } // with NeedInput { key => resume(store.unsafeGet(key)) }
}



// def main() = {
	

// 	// test vtRebuilder
// 	val store: Map[K, V] = emptyMap() 
// 	var vTraces: VT = [] 

// 	store.update("E",1)
// 	store.update("F",1)
// 	store.update("G",1)
// 	store.update("H",1)

// 	// fetch function for testing vtRebuilder
// 	// uses task descriptions recursively to build a new key
// 	def fetch(k: K): V / NeedInput= try { exampleTasks(k) }  with Fetch { k =>
// 		resume(fetch(k))
// 	}

	
// 	def tryRebuilder(testValue: V) = 
// 		try { 
// 			try { vtRebuilder("A", testValue){ () => exampleTasks("A") }{ k => fetch(k)} } 
// 			with VTState { 
// 				def getVT() = resume(vTraces) 
// 				def modifyVT(k, valHash, deps) = { vTraces = recordVT(k, valHash, deps, vTraces); resume(())}
// 				}
// 			// with Fetch { key => resume(fetch(key))  }
// 		} with NeedInput { key => resume(store.unsafeGet(key)) }
	
// 	tryRebuilder(5)
// 	println(vTraces.join(", ") ++ "\n")

// 	store.update("E",2)

// 	tryRebuilder(5)
// 	println(vTraces.join(", ") ++ "\n")

// 	tryRebuilder(6)
// 	println(vTraces.join(", ") ++ "\n")
	
// 	store.update("F", 3) 
// 	tryRebuilder(6)
// 	println(vTraces.join(", ") ++ "\n")
	
// 	def supplyInput[V](){ prog: () => V / NeedInput }: V = 
// 		try { prog() } with NeedInput { key =>
// 			var input = key match {
// 				case "A1" => 10
// 				case "A2" => 20
// 				case "C1" => 1
				
// 				// supplied by fetch (fetchIO in paper)
// 				case "B2" => 10
// 				case _ => 42
// 			}
// 			resume(input)
// 		}

// 	// val tracked = supplyInput(){ () => try { track(){ sprsh2("B1") }{ k => do Fetch(k)} } 
// 	// 	with Fetch { key =>
// 	// 			val input = do NeedInput(key)
// 	// 			println(key ++ ": " ++ show(input)) 
// 	// 			resume(input) 
// 	// 		}
// 	// 	} 
		
	
	
// 	// val somewhatPrettierTracked = "("++ show(tracked.first) ++ ", [" ++ tracked.second.join(", ") ++"]" ++ ")"
// 	// println(somewhatPrettierTracked)


	
// 	println("")

	
// }