module make

import mutable/map
import mutable/heap
import immutable/list
import immutable/option

import graph
import helpers
import tasks/all_tasks

import list_lib


type Time = Int
record MakeInfo(now: Ref[Time], modTimes: Map[K, Time])

effect GetInfo(): MakeInfo


def make(target: K){ tasks: K => V / {Fetch, NeedInput} } : Unit / { GetInfo, Store, Fetch, NeedInput }= {
    topological(target){ (key, value) => modTimeRebuilder(key, value){ () => makefile(key)} }
}


def topological(target: K){ rebuilder: (K, V) => V  / {Fetch, NeedInput}}: Unit / {Fetch, NeedInput, Store} = {
    val order: List[K] = topSort(graph(target){key => makefile(key)})

    def build(key: K) = { 
        val value: V = getValue(key)
        def fetch(k: K): V = { getValue(k) }

        val newValue: V = try { rebuilder(key, value) } 
            with Fetch { key => resume(fetch(key)) }
            with NeedInput { key => resume(getValue(key)) }
        putValue(key, newValue)
        
        newValue
    }    

    order.map { file => build(file) };
    ()
}


def modTimeRebuilder(key: K, value: V){ task: () => V / {Fetch, NeedInput} } : V / { Fetch, NeedInput, GetInfo} = {
	val makeInfo: MakeInfo = GetInfo()
	val dirty: Boolean = (makeInfo.modTimes.get(key)) match {
			case None()  => true
			case Some(time) => any(dependencies{ () => makefile(key) }){ dep => makeInfo.modTimes.unsafeGet(dep) > time }
		}
	// if(dirty){ updateFilesystem(makeInfo, [key]); task() }
	if(dirty){
		val timeNow = makeInfo.now.get
		makeInfo.modTimes.update(key, timeNow)
		makeInfo.now.put(timeNow + 1)
		task() 
		}
	else { value } 
}


def main() = {
	val store: Map[K, Time] = emptyMap()
	val makeInfo: MakeInfo = MakeInfo(fresh(0), store) 

	val graph = graph("main.exe"){ key => makefile(key)}
	val sorted = topSort(graph)
	println(graph)
	println("")
	println("["++ sorted.join(", ") ++ "]")

	try{ make("main.exe"){key => makefile(key)} }
	with Store {
		def getValue(key) = resume(store.unsafeGet(key))
		def putValue(key, value) = resume(store.update(key, value))
	}
	with GetInfo { () => resume(makeInfo) }
	with Fetch { key => resume(1) }
	with NeedInput { key => resume(0) }

	sorted.foreach{ key => println(key ++ " -> " ++ show(store.get(key)))}
}

