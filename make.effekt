module make

import mutable/map
import mutable/array
import immutable/list
import immutable/option

import graph
import list_lib

type K = String
type V = String
type Time = Int
type File = String

record MakeInfo(now: Array[Time], modTimes: Map[File, Time])

effect Fetch(p: List[File]): List[File]
effect NeedInput(k: K): V


// represents a makefile
def tasks(target: File): List[File] / { Fetch } = target match {
        case "util.o" => do Fetch(["util.h","util.c"])
        case "main.o" => do Fetch(["util.h","main.c"])
        case "main.exe" => do Fetch(["util.o","main.o"])
        case _ => []                                                         
    }


def modTimeRebuilder(key: K, value: V, makeInfo: MakeInfo){ task: () => V / Fetch } : V / { Fetch, NeedInput} = {
    
    val dirty: Boolean = (makeInfo.modTimes.get(key)) match {
        case None()  => true
        case Some(time) => any(dependencies(key)){ d => makeInfo.modTimes.unsafeGet(d) > time }
    }
    if(dirty){ updateFilesystem(makeInfo, [key]); task() }
    else { value } 
}


//computes dependency graph given a target key
def graph(key: K): Graph /Console = {
    
    var adjacencyList: List[AdjListEntry] = []
    
    def recDeps(target: K): Unit / Console = { 
        val newDeps = dependencies(target)
        adjacencyList = adjacencyList.append([ AdjListEntry(target, newDeps)])
        newDeps.foreach{ dependency => recDeps(dependency) }
    }

    recDeps(key)
    adjacencyList
}


// creates file if file does not exist
// increments modifiying time if file exists
def updateFilesystem(filesystem: MakeInfo, files: List[File]) : Unit = {
    var timeNow: Time = filesystem.now.unsafeGet(0)
    files.foreach { file => 
        filesystem.modTimes.update(file, timeNow)
        timeNow = timeNow + 1
    }
    filesystem.now.put(0, timeNow);
    ()
}


def dependencies(target: File): List[File] = try { tasks(target) }
    with Fetch { dependencies => resume(dependencies) }


def fileExists(file: File, filesystem: MakeInfo): Boolean = {
    filesystem.modTimes.get(file) != None()
}

def main() = {

    val graph = graph("main.exe")
    val sorted = topologicalSort(graph)
    println(graph)
    println("")
    println("["++ sorted.join(", ") ++ "]")
}
